# -*- coding: utf-8 -*-
"""Lunge_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IFVoSAYBQeLb6Ip4kulDo6HMiqSqrc1K
"""

!pip install tensorflowjs #model 파일 변환을 위한 tenserflowjs 설치

import numpy as np
import pandas as pd
import tensorflow as tf

from tensorflow import feature_column
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras import layers
from sklearn.preprocessing import MultiLabelBinarizer

import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from google.colab import files  #csv 파일 업로드를 위함

seed = 10
np.random.seed(seed)

csvFile = files.upload() #데이터 파일 업로드

import io
data = pd.read_csv(io.BytesIO(csvFile['lunge_dataset.csv']))
print(data.shape)

label = data['label']
features = data.drop(['label'],axis=1)

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(features, label, test_size=0.2)

def build_model():
  model = keras.Sequential([
                            keras.Input(shape = [len(train_x.keys())]),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(3, activation = 'softmax')
  ])

  model.compile(
      loss='categorical_crossentropy',
      optimizer = 'adam',
      metrics=['acc'])
  return model

model = build_model()
model.summary()

mlb = MultiLabelBinarizer()
labels = mlb.fit_transform(label.str.split(","))

train_x, test_x, train_y, test_y = train_test_split(features, labels, test_size=0.2)

from sklearn.utils import validation
model.fit(train_x,train_y, epochs = 30)

model.evaluate(test_x, test_y) #테스트 데이터로 검증
mlb.classes_ # 출력 형태

# 테스트를 위한 코드
# csvTestFile =  files.upload() 
# test = pd.read_csv(io.BytesIO(csvTestFile['csv_downloadfile (9).csv']))
# test
# proba = model.predict(test)
# idx = np.argmax(proba)
# proba

"""Save-Model

"""

import tensorflowjs as tfjs #저장된 모델을 불러오기 위함
tfjs.converters.save_keras_model(model,artifacts_dir="./lunge_model.json")

model.save('lunge_model.h5')

