# -*- coding: utf-8 -*-
"""Push_UP_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s3UWpDSCq52vGChGaV1hg2MdZogpDW6u
"""

!pip install tensorflowjs #model 파일 변환을 위한 tenserflowjs 설치

import numpy as np
import pandas as pd
import tensorflow as tf 

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense
from tensorflow.keras import layers # 딥러닝 모델을 위한 라이브러리들

from sklearn.preprocessing import MultiLabelBinarizer # label 인코딩을 위한 라이브러리

from google.colab import files  #csv 파일 colab 상으로 업로드를 위함

seed = 10
np.random.seed(seed)

csvFile = files.upload() #데이터셋 파일 업로드

import io
data = pd.read_csv(io.BytesIO(csvFile['pushup_dataset.csv']))
data.describe()

"""## 데이터 셋 설명
자체 수집한 팔굽혀펴기 데이터를 PoseNet 모델을 통해 <br>
0.코   
1.왼쪽 눈  
2.오른쪽 눈  
3.왼쪽 귀  
4.오른쪽 귀  
5.왼쪽 어깨  
6.오른쪽 어깨  
7.왼쪽 팔꿈치  
8.오른쪽 팔꿈치  
9.왼쪽 손목  
10.오른쪽 손목  
11.왼쪽 골반 부위  
12.오른쪽 골반 부위  
13.왼쪽 무릎  
14.오른쪽 무릎  
15.왼쪽 발목  
16.오른쪽 발목  

각각의 x,y 좌표와 신뢰도점수, 이미지 크기와 ,전체 신뢰도 점수를 구해 데이터 셋으로 만들었습니다.  

[출처) 포즈예측 | Tensorflow Lite](https://www.tensorflow.org/lite/examples/pose_estimation/overview?hl=ko)





"""

for i in range(17):
  str_i = str(i)
  data[str_i+'_position_x'] = data[str_i+'_position_x'] / data['img_width']
  data[str_i+'_position_y'] = data[str_i+'_position_y'] / data['img_height']

# 이미지 크기로 각 x,y 좌표를 나누어 이미지 크기에 구애 받지 않는 데이터셋으로 변환
label = data['label']
features = data.drop(['label'],axis=1).drop(['img_width'],axis=1).drop(['img_height'],axis=1) # label과 feature 분리

features

def build_model():
  model = keras.Sequential([
                            keras.Input(shape = [len(features.keys())]), #input [,52]
                            layers.Dense(64, activation='relu'),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(64, activation='relu'),
                            layers.Dense(3, activation = 'softmax') #3개의 Dense Layer와 출력 레이어로 모델 구성
  ])

  model.compile(
      loss='categorical_crossentropy',
      optimizer = 'adam',
      metrics=['acc'])
  return model

model = build_model()
model.summary()

mlb = MultiLabelBinarizer()
labels = mlb.fit_transform(label.str.split(",")) #Label One-Hot Encoding

mlb.classes_ # label 출력 순서 확인

from sklearn.model_selection import train_test_split
train_x, test_x, train_y, test_y = train_test_split(features, labels, test_size=0.3)  #Train set과 Test set 구분
train_y

from sklearn.utils import validation 
model.fit(train_x,train_y, epochs = 30)#모델 학습

model.evaluate(test_x, test_y) #테스트 데이터로 검증
mlb.classes_ # Label One-Hot Encoding부분 확인

# 테스트를 위한 코드
# csvTestFile =  files.upload() 
# test = pd.read_csv(io.BytesIO(csvTestFile['csv_downloadfile (9).csv']))
# test
# proba = model.predict(test)
# idx = np.argmax(proba)
# proba

"""Save Model

"""

import tensorflowjs as tfjs #저장된 모델을 불러오기 위함
tfjs.converters.save_keras_model(model,artifacts_dir="./push_up_model1.json") #tensorflow.js 사용 가능 형태로 저장
model.save('push_up_model.h5') #케라스 모델 저장

